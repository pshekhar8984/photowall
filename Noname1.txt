/AddPhoto

import React, {Component} from 'react'
class AddPhoto extends Component {
 constructor() {
 super()
 this.handleSubmit = this.handleSubmit.bind(this)
 }
 handleSubmit(event) {
 event.preventDefault();
 const imageLink = event.target.elements.link.value
 const description = event.target.elements.description.value
 const post = {
 id: Number(new Date()),
 description: description,
 imageLink: imageLink
 }
 if (description && imageLink){
 this.props.startAddingPost(post)
 this.props.onHistory.push('/')
 }
 }
 render() {
 return (
 <div>
 <div className="form">
 <form onSubmit={this.handleSubmit}> 
 <input type ="text" placeholder="Link" name="link"/>
 <input type ="text" placeholder="Desciption" name="description"/>
 <button> Post </button>
 </form>
 </div>
 </div>
 )
 }
}
export default AddPhoto
/App

import Main from './Main'
import {connect} from 'react-redux'
import {bindActionCreators} from 'redux'
import * as actions from '../redux/actions'
import {withRouter} from 'react-router'
function mapStateToProps(state) {
 return {
 posts: state.posts,
 comments: state.comments
 }
}
function mapDispatchToProps(dispatch) {
 return bindActionCreators(actions, dispatch)
}
const App = withRouter(connect(mapStateToProps, mapDispatchToProps)(Main))
export default App
/Comments

import React, {Component} from 'react'
class Comments extends Component {
 constructor() {
 super()
 this.handleSubmit = this.handleSubmit.bind(this)
 }
 handleSubmit(event) {
 event.preventDefault()
 const comment = event.target.elements.comment.value
 this.props.startAddingComment(comment, this.props.id)
 event.target.elements.comment.value = ''
 }
 render() {
 return <div className="comment">
 {
 this.props.comments.map((comment, index) => {
 return (
 <p key={index}> {comment} </p>
 )
 })
 }
 <form className="comment-form" onSubmit={this.handleSubmit}> 
 <input type="text" placeholder="comment" name="comment"/>
 <input type="submit" hidden/>
 </form>
 
 
 </div>
 }
}
export default Comments
/Main

import React, {Component} from 'react'
import PhotoWall from './PhotoWall'
import AddPhoto from './AddPhoto'
import {Route, Link} from 'react-router-dom'
import Single from './Single'
class Main extends Component {
 
 state = { loading: true }
 componentDidMount() {
 this.props.startLoadingPost().then(() => {
 this.setState({loading: false})
 })
 this.props.startLoadingComments()
 }
 render() {
 return ( 
 
 <div>
 <h1> 
 <Link to="/"> Photowall </Link> 
 </h1>
 <Route exact path = "/" render={() => (
 <div>
 <PhotoWall {...this.props} /> 
 </div>
 )}/> 
 <Route path= "/AddPhoto" render = {({history}) => (
 <AddPhoto {...this.props} onHistory={history}/>
 )}/>
 <Route exact path="/single/:id" render = {(params) => (
 <Single loading={this.state.loading} {...this.props} {...params}/> 
 )}/>
 
 </div>
 )
 }
}
export default Main
/Photo

import React from 'react';
import PropTypes from 'prop-types'
import {Link} from 'react-router-dom'
function Photo(props) {
 const post = props.post
 return <figure className="figure"> 
 <Link to={`/single/${post.id}`}> <img className= "photo" src={post.imageLink} alt={post.description}/></Link>
 <figcaption> <p> {post.description} </p> </figcaption>
 <div className = "button-container">
 <button onClick = {() => {
 props.startRemovingPost(props.index, post.id)
 props.history.push('/')
 }}> Remove </button>
 <Link className="button" to={`/single/${post.id}`}> 
 <div className="comment-count"> 
 <div className="speech-bubble"> </div>
 {props.comments[post.id] ? props.comments[post.id].length : 0 }
 </div>
 </Link>
 </div>
 </figure>
}
Photo.propTypes = {
 post: PropTypes.object.isRequired,
}
export default Photo
/Photowall
 
import React from 'react'
import Photo from './Photo'
import PropTypes from 'prop-types'
import {Link} from 'react-router-dom'
//anchor tag, href attribute
function PhotoWall(props) {
return <div> 
 <Link className = "addIcon" to="/AddPhoto"> </Link> 
 <div className="photoGrid" >
 {props.posts
 .sort(function(x,y) {
 return y.id - x.id
 })
 .map((post, index) => <Photo key={index} post={post} {...props} index={index}/>)}
 </div>
 </div>
}
PhotoWall.propTypes = {
 posts: PropTypes.array.isRequired,
}
 export default PhotoWall
/Single

import React, {Component} from 'react'
import Photo from './Photo'
import Comments from './Comments'
class Single extends Component {
 render() {
 const {match, posts} = this.props
 const id = Number(match.params.id)
 const post = posts.find((post) => post.id === id)
 const comments = this.props.comments[match.params.id] || []
 const index = this.props.posts.findIndex((post) => post.id === id)
 if (this.props.loading === true) {
 return <div className="loader"> ...loading </div>
 } else if (post) { 
 return <div className='single-photo'>
 <Photo post={post} {...this.props} index={index}/>
 <Comments startAddingComment={this.props.startAddingComment} comments={comments} id = {id}/>
 </div> 
 } else {
 return <h1> ...no post found </h1>
 }
 
 } 
}
export default Single
/Title

import React from 'react'
function Title(props) {
 return <h1> {props.title} </h1>
 
}
export default Title
/Posts

const posts = []
 export default posts
/Config

import * as firebase from 'firebase'
var config = {
 apiKey: "AIzaSyAWZObGQDfGbplDsJ0QXZGfZ22Ph9vlkgc",
 authDomain: "photowall-45333.firebaseapp.com",
 databaseURL: "https://photowall-45333.firebaseio.com",
 projectId: "photowall-45333",
 storageBucket: "photowall-45333.appspot.com",
 messagingSenderId: "586411564955"
 }
 
 firebase.initializeApp(config)
 const database = firebase.database()
 export {database}
/actions

import {database} from '../database/config'
export function startAddingPost(post) {
 return (dispatch) => {
 return database.ref('posts').update({[post.id]: post}).then(() => {
 dispatch(addPost(post))
 }).catch((error) => {
 console.log(error)
 })
 }
} 
export function startLoadingPost() {
 return (dispatch) => {
 return database.ref('posts').once('value').then((snapshot) => {
 let posts = []
 snapshot.forEach((childSnapshot) => {
 posts.push(childSnapshot.val())
 })
 dispatch(loadPosts(posts))
 }).catch((error) => {
 console.log(error)
 })
 }
}
export function startRemovingPost(index, id) {
 return (dispatch) => {
 return database.ref(`posts/${id}`).remove().then(() => {
 dispatch(removePost(index))
 }).catch((error) => {
 console.log(error)
 })
 }
}
export function startAddingComment(comment, postId) {
 return (dispatch) => {
 return database.ref('comments/'+postId).push(comment).then(() => {
 dispatch(addComment(comment, postId))
 }).catch((error) => {
 console.log(error)
 })
 }
}
export function startLoadingComments() {
 return (dispatch) => {
 return database.ref('comments').once('value').then((snapshot) => {
 let comments = {}
 snapshot.forEach((childSnapshot) => {
 comments[childSnapshot.key] = Object.values(childSnapshot.val())
 })
 dispatch(loadComments(comments))
 })
 }
}
export function loadComments(comments) {
 return {
 type: 'LOAD_COMMENTS',
 comments
 }
}
export function removePost(index) {
 return {
 type: 'REMOVE_POST',
 index
 }
}
export function addPost(post) {
 return {
 type: 'ADD_POST',
 post
 }
}
export function addComment(comment, postId) {
 return {
 type: 'ADD_COMMENT',
 comment,
 postId
 }
}
export function loadPosts(posts) {
 return {
 type: 'LOAD_POSTS',
 posts
 }
}
/reducer

import _posts from '../data/posts'
import {combineReducers} from 'redux'
function comments(state={}, action) {
 switch (action.type) {
 case 'ADD_COMMENT': 
 
 if (!state[action.postId]) {
 return {...state, [action.postId]: [action.comment]}
 } else {
 return {...state, [action.postId]: [...state[action.postId], action.comment] }
 }
 case 'LOAD_COMMENTS': return action.comments
 
 default: return state
 }
 return state
}
function posts(state = _posts, action) {
 switch (action.type) {
 case 'REMOVE_POST': return [...state.slice(0, action.index), ...state.slice(action.index + 1)]
 case 'ADD_POST': return [...state, action.post]
 case 'LOAD_POSTS': return action.posts
 default: return state
 }
}
const rootReducer = combineReducers({posts, comments})
export default rootReducer
/stylesheet

html {
    font-size: 10px;
    font-family: sans-serif;
}
p {
    font-size: 1.6rem;
    line-height: 1.5;
}
h1 {
    font-family: billabong, 'billabongregular';
    text-align: center;
    font-weight: 100;
    font-size: 13rem;
    margin: 2rem 0;
    letter-spacing: -1px;
    color: black;
    text-decoration: none;
}
h1 a {
    color: black;
    text-decoration: none;
}
h1 a:focus {
    outline: 0;
}
@font-face {
    font-family: 'billabongregular';
    src: url("https://cdn.rawgit.com/milktronics/beaglegr.am/master/public/fonts/billabong-webfont.eot");
    src: url("https://cdn.rawgit.com/milktronics/beaglegr.am/master/public/fonts/billabong-webfont.eot?#iefix") format('embedded-opentype'), url("https://cdn.rawgit.com/milktronics/beaglegr.am/master/public/fonts/billabong-webfont.woff") format('woff'), url("https://cdn.rawgit.com/milktronics/beaglegr.am/master/public/fonts/billabong-webfont.ttf") format('truetype'), url("https://cdn.rawgit.com/milktronics/beaglegr.am/master/public/fonts/billabong-webfont.svg#billabongregular") format('svg');
    font-weight: normal;
    font-style: normal;
}
body {
    background: offwhite;
}
.photoGrid {
    display: flex;
    flex-wrap: wrap;
    max-width: 1000px;
    margin: 0 auto;
}
.figure {
 flex-basis: calc(33.333% - 4rem);
 border: 1px solid #d3d3d3;
 padding: 2rem;
 flex-grow: 1;
 margin: 0 2rem 2rem 2rem;
}
.figure .single-photo {
    flex-basis: calc(33.333% - 4rem);
    flex-grow: 1;
    flex-shrink: 0;
    margin: 0 2rem 2rem 2rem;
    padding: 2rem;
    border: 1px solid #d3d3d3;
    background: #fff;
    position: relative;
}
.single-photo {
    max-width: 1000px;
    margin: 0 auto;
    display: flex;
    background: #fff;
    border: black;
}
.single-photo .figure {
    box-shadow: none;
    margin: 0 2rem 0 0;
    border: 0;
    padding: 0;
    flex: 1 0 60%;
    max-width: 60%;
}
.single-photo .comments {
    flex: 1 0 40%;
    max-width: 40%;
}
.single-photo .photo {
    width: 100%;
    margin: 0;
}
.photo {
    width: calc(100% + 4rem);
    margin-left: -2rem;
    margin-top: -2rem;
    max-width: none;
}
.comment{
    width: 100%
}
.comment p {
    border-bottom: 1px solid #d3d3d3;
    padding: 0.5rem 0;
}
.comment-form input,
.comment-form textarea {
    width: 100%;
    border: 0;
    font-size: 1.3rem;
    padding: 1rem 0;
    border-bottom: 1px solid #d3d3d3;
    outline: none;
    resize: vertical;
}
.addIcon {
    background: url("https://image.flaticon.com/icons/svg/60/60740.svg") center no-repeat;
    background-size: contain;
    padding: 40px;
    display: table;
    margin: 20px auto;
    border: none;
}
.button-container {
    margin: 0 auto;
    display: flex;
    align-items: center;
    justify-content: center;
}
button, .button {
    border: 2px solid #f2f2f2;
    background: none;
    flex-basis: 48%;
    display: inline-block;
    line-height: 2;
    text-decoration: none;
    padding: 5px;
    text-align: center;
    font-size: 15px;
    color: red;
    transition: all 0.2s;
    box-sizing: padding-box;
    
}
button:hover,.button:hover, button:focus, .button:focus {
    border-color: #00f;
    outline: 0;
}
.speech-bubble {
    background: url("https://d30y9cdsu7xlg0.cloudfront.net/png/51904-200.png") center no-repeat;
    background-size: contain;
    padding: 10px;
    margin: 5px;
    display: inline-block;
    border: none;
    position: relative;
}
.comment-count {
    margin: 0 auto;
    display: flex;
    align-items: center;
    justify-content: center;
    color: black
}
.form {
    width: 360px;
    padding: 0 0 0;
    margin: auto;
}
 
.form input {
    font-family: sans-serif;
    outline: 0;
    background: #f2f2f2;
    width: 100%;
    border: 0;
    margin: 0 0 15px;
    padding: 15px;
    box-sizing: border-box;
    font-size: 14px;
 }
.form button {
    font-family: "Roboto", sans-serif;
    text-transform: uppercase;
    outline: 0;
    background:#065784;
    width: 100%;
    border: 0;
    padding: 15px;
    color: #FFFFFF;
    font-size: 14px;
    -webkit-transition: all 0.3 ease;
    transition: all 0.3 ease;
    cursor: pointer;
 }
 .form button:hover,.form button:active,.form button:focus {
    background: #7B8589;
}
.loader {
    height: 20%;
    width: 100%;
    display: flex;
    position: fixed;
    align-items: center;
    justify-content: center;
    font-size: 28pt;
}
/index

import React from 'react'
import ReactDOM from 'react-dom'
import './styles/stylesheet.css'
import {BrowserRouter} from 'react-router-dom'
import {createStore, applyMiddleware} from 'redux'
import rootReducer from './redux/reducer'
import {Provider} from 'react-redux'
import App from './Components/App'
import thunk from 'redux-thunk'
import {database} from './database/config'
const store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(), applyMiddleware(thunk))
ReactDOM.render(<Provider store={store}><BrowserRouter><App/></BrowserRouter></Provider>, document.getElementById('root'))